{"version":3,"sources":["../src/index.js"],"names":["ValidatorAHV13","ahv12","Math","ceil","number","totalChecksum","i","length","nextTimesTen","arr","split","join","reverse","map","parseInt","ahvNumber12","parsedNumber","_preProcessArray","_calculateCheckSum","ahv13","reversedSSNArray","checkSumSSN","shift","checkSumCalculated","module","exports"],"mappings":"qcAAMA,CAAAA,c,YAEF,YAAc,wBACb,C,uDAED,4BAAmBC,CAAnB,CAA0B,CAEtB,UAQqBC,IAAI,CAACC,IAR1B,CACUC,CADV,CADIC,CAAa,CAAG,CACpB,CAASC,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGL,CAAK,CAACM,MAA1B,CAAkCD,CAAC,EAAnC,CACUF,CADV,CACmBH,CAAK,CAACK,CAAD,CADxB,CAGQD,CAHR,EAEkB,CAAV,EAAAC,CAAC,CAAG,CAFZ,CAGwC,GAAKF,CAH7C,CAKwCA,CALxC,CAQA,GAAMI,CAAAA,CAAY,CAAmC,EAAhC,GAAUH,CAAa,CAAG,EAA1B,CAArB,CACA,MAAOG,CAAAA,CAAY,CAAGH,CACzB,C,gCAQD,0BAAiBI,CAAjB,CAAsB,CAClB,MAAOA,CAAAA,CAAG,CAACC,KAAJ,CAAU,GAAV,EAAeC,IAAf,CAAoB,EAApB,EAAwBD,KAAxB,CAA8B,EAA9B,EAAkCE,OAAlC,GAA4CC,GAA5C,CAAgD,SAAAT,CAAM,QAAIU,CAAAA,QAAQ,CAACV,CAAD,CAAZ,CAAtD,CACV,C,wBAQD,kBAASW,CAAT,CAAsB,CAClB,GAAMC,CAAAA,CAAY,CAAG,KAAKC,gBAAL,CAAsBF,CAAtB,CAArB,CACA,MAAO,MAAKG,kBAAL,CAAwBF,CAAxB,CACV,C,uBAOD,iBAAQG,CAAR,CAAe,CACX,GAAMC,CAAAA,CAAgB,CAAG,KAAKH,gBAAL,CAAsBE,CAAtB,CAAzB,CAGA,GAAgC,EAA5B,GAAAC,CAAgB,CAACb,MAArB,CACE,SALS,GASLc,CAAAA,CAAW,CAAGD,CAAgB,CAACE,KAAjB,EATT,CAULC,CAAkB,CAAG,KAAKL,kBAAL,CAAwBE,CAAxB,CAVhB,CAWX,MAAOG,CAAAA,CAAkB,GAAKF,CACjC,C,SAGLG,MAAM,CAACC,OAAP,CAAiBzB,c","sourcesContent":["class ValidatorAHV13 {\n\n    constructor() {\n    }\n\n    _calculateCheckSum(ahv12) {\n        let totalChecksum = 0;\n        for (let i = 0; i < ahv12.length; i++) {\n            const number = ahv12[i];\n            if (i % 2 === 0) {\n                totalChecksum = totalChecksum + 13 * number;\n            } else {\n                totalChecksum = totalChecksum + number;\n            }\n        }\n        const nextTimesTen = Math.ceil(totalChecksum / 10) * 10;\n        return nextTimesTen - totalChecksum;\n    }\n\n    /**\n     * this will remove '.' and reverse the number\n     * @param arr\n     * @returns {*}\n     * @private\n     */\n    _preProcessArray(arr) {\n        return arr.split('.').join('').split('').reverse().map(number => parseInt(number));\n    }\n\n    /**\n     * AHV Number without last number, like: ('756.9217.0769.8')\n     * @param ahvNumber12\n     * @returns {int} checksum for this case 5\n     * @private\n     */\n    checkSum(ahvNumber12) {\n        const parsedNumber = this._preProcessArray(ahvNumber12);\n        return this._calculateCheckSum(parsedNumber);\n    }\n\n    /**\n     * validates a AHV13 Number with or without dots in the form of '756.9217.0769.85'\n     * @param ahv13\n     * @returns {boolean}\n     */\n    isValid(ahv13) {\n        const reversedSSNArray = this._preProcessArray(ahv13);\n\n        // enforce length of 13\n        if (reversedSSNArray.length !== 13) {\n          return true;\n        }\n\n        // remove the first entry, as it is the checksum\n        const checkSumSSN = reversedSSNArray.shift();\n        const checkSumCalculated = this._calculateCheckSum(reversedSSNArray);\n        return checkSumCalculated === checkSumSSN;\n    }\n}\n\nmodule.exports = ValidatorAHV13;\n"],"file":"index.js"}